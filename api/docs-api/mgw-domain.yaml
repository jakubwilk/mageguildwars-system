openapi: 3.0.0
paths:
  /auth:
    post:
      operationId: AuthController_createAccount
      summary: Create user account with first player profile
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "201":
          description: Account with first profile successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUserSnapshotDto"
        "400":
          description: Account cannot be created because there is record in database with
            the same email or login or profile with that name already exists in
            database
        "500":
          description: There is a problem with create hash, read or write data into database
      tags: &a1
        - Auth module
    get:
      operationId: AuthController_logoutAccount
      summary: Logout from account
      parameters: []
      responses:
        "200":
          description: Cookies have been deleted
        "401":
          description: Missing auth token cookie
      tags: *a1
      security:
        - x-access-token: []
  /auth/login:
    post:
      operationId: AuthController_loginAccount
      summary: Log in to the account
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUserDto"
      responses:
        "200":
          description: Successfully logged into account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUserSnapshotDto"
        "400":
          description: Account not found in the database
        "500":
          description: There is a problem with create hash, read or write data into database
      tags: *a1
  /auth/me:
    get:
      operationId: AuthController_autoLoginAccount
      summary: Auto login to account with saved refresh-token
      parameters: []
      responses:
        "200":
          description: Successfully logged into account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUserSnapshotDto"
      tags: *a1
      security:
        - x-refresh-token: []
  /auth/refresh:
    get:
      operationId: AuthController_refreshToken
      summary: Create fresh access token based on refresh token and update refresh token
      parameters: []
      responses:
        "200":
          description: Successfully updated pair of tokens
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUserTokensDto"
      tags: *a1
      security:
        - x-refresh-token: []
  /auth/rules:
    get:
      operationId: AuthController_getRegistrationRules
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a1
info:
  title: Mage Guild Wars API
  description: Swagger schema for MGW Rest API
  version: "1.0"
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    cookie:
      type: http
      in: cookie
      name: x-refresh-token
      scheme: Bearer
  schemas:
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          description: Account and first profile username
        email:
          type: string
          description: Account email
        password:
          type: string
          description: Strong safe account password
      required:
        - login
        - email
        - password
    UserSnapshotDto:
      type: object
      properties:
        uid:
          type: string
          description: Unique user ID
        login:
          type: string
          description: Account username and first profile name
        slug:
          type: string
          description: User slug used in URLs
        email:
          type: string
          description: User email
        group:
          type: string
          description: Account group
        isActive:
          type: boolean
          description: Check if account is activated by admins
        isLocked:
          type: boolean
          description: Check if account is banned or temporary locked
        isCreateProfileEnabled:
          type: boolean
          description: Check if user is allowed to create more profiles
        isGameMasterProfileEnabled:
          type: boolean
          description: Check if user is allowed to create game master profile
        isGameMaster:
          type: boolean
          description: "Check if account is game master. TODO: To remove"
        createdAt:
          format: date-time
          type: string
          description: Date when account was created
        updatedAt:
          format: date-time
          type: string
          description: Date of last account update
      required:
        - uid
        - login
        - slug
        - email
        - group
        - isActive
        - isLocked
        - isCreateProfileEnabled
        - isGameMasterProfileEnabled
        - isGameMaster
        - createdAt
        - updatedAt
    AuthUserSnapshotDto:
      type: object
      properties:
        user:
          description: User object
          allOf:
            - $ref: "#/components/schemas/UserSnapshotDto"
        accessToken:
          type: string
          description: User access token used in authorization
        refreshToken:
          type: string
          description: User refresh token used to update access token
      required:
        - user
        - accessToken
        - refreshToken
    LoginUserDto:
      type: object
      properties:
        login:
          type: string
          description: Account name used in registration process
        password:
          type: string
          description: User password
      required:
        - login
        - password
    AuthUserTokensDto:
      type: object
      properties:
        accessToken:
          type: string
          description: User unique access token
        refreshToken:
          type: string
          description: User unique refresh token
      required:
        - accessToken
        - refreshToken
